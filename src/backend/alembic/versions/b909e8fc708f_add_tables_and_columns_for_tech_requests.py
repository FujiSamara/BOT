"""Add tables and columns for tech requests

Revision ID: b909e8fc708f
Revises: 319521792a8b
Create Date: 2024-08-11 20:54:01.130867

"""

from typing import Sequence, Union

from alembic import op
import fastapi_storages
import sqlalchemy as sa
from sqlalchemy.dialects.postgresql import ENUM

from settings import get_settings
import alembic_custom.enum as c_enum


old_options = (
    "admin",
    "crm_bid",
    "crm_budget",
    "crm_expenditure",
    "bot_bid_create",
    "bot_bid_kru",
    "bot_bid_owner",
    "bot_bid_teller_cash",
    "bot_bid_teller_card",
    "bot_bid_accountant_cash",
    "bot_bid_accountant_card",
    "bot_rate",
    "bot_worker_bid",
)
new_options = sorted(
    old_options
    + (
        "bot_technical_request_worker",
        "bot_technical_request_repairman",
        "bot_technical_request_chief_technician",
        "bot_technical_request_territorial_manager",
    )
)

# revision identifiers, used by Alembic.
revision: str = "b909e8fc708f"
down_revision: Union[str, None] = "319521792a8b"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    c_enum.update_enum(
        old_options, new_options, "fujiscope", ["post_scopes"], ["scope"]
    )

    op.create_table(
        "technical_problems",
        sa.Column(
            "executor",
            sa.Enum("technician", "chief_technician", "electrician", name="executor"),
            nullable=False,
        ),
        sa.Column("sla", sa.Integer(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("problem_name", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("problem_name"),
    )
    op.create_table(
        "technical_requests",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("problem_id", sa.Integer(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column(
            "state",
            ENUM(
                "pending",
                "approved",
                "denied",
                "pending_approval",
                "skipped",
                name="approvalstatus",
                create_type=False,
            ),
            nullable=False,
        ),
        sa.Column("score", sa.Integer(), nullable=True),
        sa.Column("open_date", sa.DateTime(), nullable=False),
        sa.Column("deadline_date", sa.DateTime(), nullable=False),
        sa.Column("repair_date", sa.DateTime(), nullable=True),
        sa.Column("confirmation_date", sa.DateTime(), nullable=True),
        sa.Column("confirmation_description", sa.String(), nullable=True),
        sa.Column("reopen_date", sa.DateTime(), nullable=True),
        sa.Column("reopen_deadline_date", sa.DateTime(), nullable=True),
        sa.Column("reopen_repair_date", sa.DateTime(), nullable=True),
        sa.Column("reopen_confirmation_date", sa.DateTime(), nullable=True),
        sa.Column("close_date", sa.DateTime(), nullable=True),
        sa.Column("close_description", sa.String(), nullable=True),
        sa.Column("worker_id", sa.Integer(), nullable=False),
        sa.Column("repairman_id", sa.Integer(), nullable=False),
        sa.Column("territorial_manager_id", sa.Integer(), nullable=False),
        sa.Column("department_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["department_id"],
            ["departments.id"],
        ),
        sa.ForeignKeyConstraint(
            ["problem_id"],
            ["technical_problems.id"],
        ),
        sa.ForeignKeyConstraint(
            ["repairman_id"],
            ["workers.id"],
        ),
        sa.ForeignKeyConstraint(
            ["territorial_manager_id"],
            ["workers.id"],
        ),
        sa.ForeignKeyConstraint(
            ["worker_id"],
            ["workers.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "technical_requests_problem_photos",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "document",
            fastapi_storages.integrations.sqlalchemy.FileType(
                storage=get_settings().storage
            ),
            nullable=False,
        ),
        sa.Column("technical_request_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["technical_request_id"],
            ["technical_requests.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "technical_requests_repair_photos",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "document",
            fastapi_storages.integrations.sqlalchemy.FileType(
                storage=get_settings().storage
            ),
            nullable=False,
        ),
        sa.Column("technical_request_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["technical_request_id"],
            ["technical_requests.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )

    op.add_column(
        "departments", sa.Column("chief_technician_id", sa.Integer(), nullable=True)
    )
    op.add_column(
        "departments", sa.Column("technician_id", sa.Integer(), nullable=True)
    )
    op.add_column(
        "departments", sa.Column("electrician_id", sa.Integer(), nullable=True)
    )
    op.create_foreign_key(
        None, "departments", "workers", ["chief_technician_id"], ["id"]
    )
    op.create_foreign_key(None, "departments", "workers", ["technician_id"], ["id"])
    op.create_foreign_key(None, "departments", "workers", ["electrician_id"], ["id"])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###\
    c_enum.update_enum(
        new_options, old_options, "fujiscope", ["post_scopes"], ["scope"]
    )

    op.drop_column("departments", "electrician_id")
    op.drop_column("departments", "technician_id")
    op.drop_column("departments", "chief_technician_id")
    op.drop_table("technical_requests_repair_photos")
    op.drop_table("technical_requests_problem_photos")
    op.drop_table("technical_requests")
    op.drop_table("technical_problems")

    c_enum.delete_enum("executor")
    # ### end Alembic commands ###
