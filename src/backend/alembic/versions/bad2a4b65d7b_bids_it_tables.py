"""bids_it_tables

Revision ID: bad2a4b65d7b
Revises: b194833559b0
Create Date: 2024-08-22 22:10:32.330277

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import fastapi_storages
from settings import get_settings


# revision identifiers, used by Alembic.
revision: str = "bad2a4b65d7b"
down_revision: Union[str, None] = "b194833559b0"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "problems_it",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("category", sa.String(), nullable=False),
        sa.Column("sla", sa.Float(), nullable=False),
        sa.Column("repairman_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["repairman_id"],
            ["workers.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "bids_it",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("problem_comment", sa.String(), nullable=False),
        sa.Column("work_comment", sa.String(), nullable=True),
        sa.Column("reopen_work_comment", sa.String(), nullable=True),
        sa.Column("problem_id", sa.Integer(), nullable=False),
        sa.Column("worker_id", sa.Integer(), nullable=False),
        sa.Column("repairman_id", sa.Integer(), nullable=True),
        sa.Column("territorial_manager_id", sa.Integer(), nullable=True),
        sa.Column("department_id", sa.Integer(), nullable=False),
        sa.Column(
            "status",
            sa.Enum(
                "pending",
                "approved",
                "denied",
                "pending_approval",
                "skipped",
                "not_relevant",
                name="approvalstatus",
            ),
            nullable=False,
        ),
        sa.Column("mark", sa.Integer(), nullable=True),
        sa.Column("opening_date", sa.DateTime(), nullable=False),
        sa.Column("done_date", sa.DateTime(), nullable=True),
        sa.Column("reopening_date", sa.DateTime(), nullable=True),
        sa.Column("approve_date", sa.DateTime(), nullable=True),
        sa.Column("close_date", sa.DateTime(), nullable=True),
        sa.Column("reopen_done_date", sa.DateTime(), nullable=True),
        sa.Column("reopen_approve_date", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["department_id"],
            ["departments.id"],
        ),
        sa.ForeignKeyConstraint(
            ["problem_id"],
            ["problems_it.id"],
        ),
        sa.ForeignKeyConstraint(
            ["repairman_id"],
            ["workers.id"],
        ),
        sa.ForeignKeyConstraint(
            ["territorial_manager_id"],
            ["workers.id"],
        ),
        sa.ForeignKeyConstraint(
            ["worker_id"],
            ["workers.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "bids_it_documents_repairman",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "document",
            fastapi_storages.integrations.sqlalchemy.FileType(
                storage=get_settings().storage
            ),
            nullable=False,
        ),
        sa.Column("bid_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["bid_id"],
            ["bids_it.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "bids_it_documents_worker",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "document",
            fastapi_storages.integrations.sqlalchemy.FileType(
                storage=get_settings().storage
            ),
            nullable=False,
        ),
        sa.Column("bid_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["bid_id"],
            ["bids_it.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.add_column(
        "departments", sa.Column("it_repairman_id", sa.Integer(), nullable=True)
    )
    op.create_foreign_key(None, "departments", "workers", ["it_repairman_id"], ["id"])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, "departments", type_="foreignkey")
    op.drop_column("departments", "it_repairman_id")
    op.drop_table("bids_it_documents_worker")
    op.drop_table("bids_it_documents_repairman")
    op.drop_table("bids_it")
    op.drop_table("problems_it")
    # ### end Alembic commands ###
