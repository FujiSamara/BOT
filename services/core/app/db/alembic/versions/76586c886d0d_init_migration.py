"""Init migration

Revision ID: 76586c886d0d
Revises:
Create Date: 2024-05-06 15:43:14.387560

"""

from typing import Sequence, Union

from alembic import op
import fastapi_storages
import sqlalchemy as sa
from settings import get_settings


# revision identifiers, used by Alembic.
revision: str = "76586c886d0d"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "companies",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("biosmart_strid", sa.String(), nullable=True),
        sa.Column("bs_import", sa.Boolean(), nullable=True),
        sa.Column("bs_import_error", sa.Boolean(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    posts = op.create_table(
        "posts",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("salary", sa.Float(), nullable=True),
        sa.Column("level", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.bulk_insert(
        posts,
        [{"id": 1, "name": "Ошибка! Обратитесь в поддержку.", "salary": 0, "level": 0}],
    )
    op.create_table(
        "departments",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("address", sa.String(), nullable=True),
        sa.Column("company_id", sa.Integer(), nullable=False),
        sa.Column("biosmart_strid", sa.String(), nullable=True),
        sa.Column("bs_import", sa.Boolean(), nullable=True),
        sa.Column("bs_import_error", sa.Boolean(), nullable=True),
        sa.Column("bs_import_error_text", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["company_id"],
            ["companies.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "worker_bids",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("f_name", sa.String(), nullable=False),
        sa.Column("l_name", sa.String(), nullable=False),
        sa.Column("o_name", sa.String(), nullable=False),
        sa.Column("create_date", sa.DateTime(), nullable=False),
        sa.Column("post_id", sa.Integer(), nullable=False),
        sa.Column(
            "pasport",
            fastapi_storages.integrations.sqlalchemy.FileType(
                storage=get_settings().storage
            ),
            nullable=False,
        ),
        sa.Column(
            "work_permission_document",
            fastapi_storages.integrations.sqlalchemy.FileType(
                storage=get_settings().storage
            ),
            nullable=False,
        ),
        sa.Column(
            "worksheet",
            fastapi_storages.integrations.sqlalchemy.FileType(
                storage=get_settings().storage
            ),
            nullable=False,
        ),
        sa.Column(
            "state",
            sa.Enum(
                "pending",
                "approved",
                "denied",
                "pending_approval",
                "skipped",
                name="approvalstatus",
            ),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["post_id"],
            ["posts.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "workers",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("f_name", sa.String(), nullable=False),
        sa.Column("l_name", sa.String(), nullable=False),
        sa.Column("o_name", sa.String(), nullable=False),
        sa.Column("b_date", sa.Date(), nullable=True),
        sa.Column("phone_number", sa.String(), nullable=True),
        sa.Column("telegram_id", sa.BigInteger(), nullable=True),
        sa.Column("post_id", sa.Integer(), nullable=False),
        sa.Column("department_id", sa.Integer(), nullable=False),
        sa.Column("company_id", sa.Integer(), nullable=False),
        sa.Column("biosmart_strid", sa.String(), nullable=True),
        sa.Column("bs_import", sa.Boolean(), nullable=True),
        sa.Column("bs_import_error", sa.Boolean(), nullable=True),
        sa.Column("bs_import_error_text", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["company_id"],
            ["companies.id"],
        ),
        sa.ForeignKeyConstraint(
            ["department_id"],
            ["departments.id"],
        ),
        sa.ForeignKeyConstraint(
            ["post_id"],
            ["posts.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("telegram_id"),
    )
    op.create_table(
        "bids",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("amount", sa.Integer(), nullable=False),
        sa.Column("payment_type", sa.String(), nullable=False),
        sa.Column("purpose", sa.String(), nullable=False),
        sa.Column("agreement", sa.String(), nullable=True),
        sa.Column("urgently", sa.String(), nullable=True),
        sa.Column("need_document", sa.String(), nullable=True),
        sa.Column("comment", sa.String(), nullable=True),
        sa.Column("create_date", sa.DateTime(), nullable=False),
        sa.Column("department_id", sa.Integer(), nullable=False),
        sa.Column("worker_id", sa.Integer(), nullable=False),
        sa.Column(
            "document",
            fastapi_storages.integrations.sqlalchemy.FileType(
                storage=get_settings().storage
            ),
            nullable=False,
        ),
        sa.Column(
            "kru_state",
            sa.Enum(
                "pending",
                "approved",
                "denied",
                "pending_approval",
                "skipped",
                name="approvalstatus",
            ),
            nullable=False,
        ),
        sa.Column(
            "owner_state",
            sa.Enum(
                "pending",
                "approved",
                "denied",
                "pending_approval",
                "skipped",
                name="approvalstatus",
            ),
            nullable=False,
        ),
        sa.Column(
            "accountant_cash_state",
            sa.Enum(
                "pending",
                "approved",
                "denied",
                "pending_approval",
                "skipped",
                name="approvalstatus",
            ),
            nullable=False,
        ),
        sa.Column(
            "accountant_card_state",
            sa.Enum(
                "pending",
                "approved",
                "denied",
                "pending_approval",
                "skipped",
                name="approvalstatus",
            ),
            nullable=False,
        ),
        sa.Column(
            "teller_cash_state",
            sa.Enum(
                "pending",
                "approved",
                "denied",
                "pending_approval",
                "skipped",
                name="approvalstatus",
            ),
            nullable=False,
        ),
        sa.Column(
            "teller_card_state",
            sa.Enum(
                "pending",
                "approved",
                "denied",
                "pending_approval",
                "skipped",
                name="approvalstatus",
            ),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["department_id"],
            ["departments.id"],
        ),
        sa.ForeignKeyConstraint(
            ["worker_id"],
            ["workers.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "work_times",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("worker_id", sa.Integer(), nullable=False),
        sa.Column("company_id", sa.Integer(), nullable=False),
        sa.Column("post_id", sa.Integer(), nullable=False),
        sa.Column("department_id", sa.Integer(), nullable=False),
        sa.Column("work_begin", sa.String(), nullable=True),
        sa.Column("work_end", sa.String(), nullable=True),
        sa.Column("work_duration", sa.Float(), nullable=True),
        sa.Column("day", sa.String(), nullable=True),
        sa.Column("rating", sa.Integer(), nullable=True),
        sa.Column("fine", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["company_id"],
            ["companies.id"],
        ),
        sa.ForeignKeyConstraint(
            ["department_id"],
            ["departments.id"],
        ),
        sa.ForeignKeyConstraint(
            ["post_id"],
            ["posts.id"],
        ),
        sa.ForeignKeyConstraint(
            ["worker_id"],
            ["workers.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("work_times")
    op.drop_table("bids")
    op.drop_table("workers")
    op.drop_table("worker_bids")
    op.drop_table("departments")
    op.drop_table("posts")
    op.drop_table("companies")
    ### end Alembic commands ###
