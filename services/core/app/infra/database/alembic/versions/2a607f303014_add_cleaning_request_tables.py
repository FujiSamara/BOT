"""add cleaning request tables

Revision ID: 2a607f303014
Revises: 7373aeb0e65f
Create Date: 2024-12-31 18:16:45.118994

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import fastapi_storages
from sqlalchemy.dialects.postgresql import ENUM

from app.infra.config import settings


# revision identifiers, used by Alembic.
revision: str = "2a607f303014"
down_revision: Union[str, None] = "7373aeb0e65f"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "cleaning_problems",
        sa.Column("problem_name", sa.String(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("problem_name"),
    )
    op.create_table(
        "cleaning_requests",
        sa.Column("problem_id", sa.Integer(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column(
            "state",
            ENUM(
                "pending",
                "approved",
                "denied",
                "pending_approval",
                "skipped",
                "not_relevant",
                name="approvalstatus",
                create_type=False,
            ),
            nullable=False,
        ),
        sa.Column("score", sa.Integer(), nullable=True),
        sa.Column("cleaner_id", sa.Integer(), nullable=False),
        sa.Column("worker_id", sa.Integer(), nullable=False),
        sa.Column("territorial_manager_id", sa.Integer(), nullable=False),
        sa.Column("department_id", sa.Integer(), nullable=False),
        sa.Column("open_date", sa.DateTime(), nullable=False),
        sa.Column("deadline_date", sa.DateTime(), nullable=False),
        sa.Column("repair_date", sa.DateTime(), nullable=True),
        sa.Column("confirmation_date", sa.DateTime(), nullable=True),
        sa.Column("confirmation_description", sa.String(), nullable=True),
        sa.Column("reopen_date", sa.DateTime(), nullable=True),
        sa.Column("reopen_deadline_date", sa.DateTime(), nullable=True),
        sa.Column("reopen_repair_date", sa.DateTime(), nullable=True),
        sa.Column("reopen_confirmation_date", sa.DateTime(), nullable=True),
        sa.Column("close_date", sa.DateTime(), nullable=True),
        sa.Column("close_description", sa.String(), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["cleaner_id"],
            ["workers.id"],
        ),
        sa.ForeignKeyConstraint(
            ["department_id"],
            ["departments.id"],
        ),
        sa.ForeignKeyConstraint(
            ["problem_id"],
            ["cleaning_problems.id"],
        ),
        sa.ForeignKeyConstraint(
            ["territorial_manager_id"],
            ["workers.id"],
        ),
        sa.ForeignKeyConstraint(
            ["worker_id"],
            ["workers.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "cleaning_requests_problem_photos",
        sa.Column(
            "document",
            fastapi_storages.integrations.sqlalchemy.FileType(storage=settings.storage),
            nullable=False,
        ),
        sa.Column("cleaning_request_id", sa.Integer(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["cleaning_request_id"],
            ["technical_requests.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "cleaning_requests_repair_photos",
        sa.Column(
            "document",
            fastapi_storages.integrations.sqlalchemy.FileType(storage=settings.storage),
            nullable=False,
        ),
        sa.Column("cleaning_request_id", sa.Integer(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["cleaning_request_id"],
            ["technical_requests.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.add_column("departments", sa.Column("cleaner_id", sa.Integer(), nullable=True))
    op.create_foreign_key(None, "departments", "workers", ["cleaner_id"], ["id"])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, "departments", type_="foreignkey")
    op.drop_column("departments", "cleaner_id")
    op.drop_table("cleaning_requests_repair_photos")
    op.drop_table("cleaning_requests_problem_photos")
    op.drop_table("cleaning_requests")
    op.drop_table("cleaning_problems")
    # ### end Alembic commands ###
