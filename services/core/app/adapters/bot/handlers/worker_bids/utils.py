from app.schemas import WorkerBidSchema
from app.infra.database.models import ApprovalStatus, ViewStatus
from app.infra.config import settings
from aiogram.utils.markdown import hbold
from app.services import get_worker_by_id, get_worker_bid_documents_requests
from app.infra.database.models import FujiScope
from app.adapters.bot.handlers.utils import notify_workers_by_scope
from typing import Any
from aiogram.types import InlineKeyboardButton
from app.adapters.bot.handlers.worker_bids.schemas import (
    WorkerBidCallbackData,
    WorkerBidPagesCallbackData,
    BidViewMode,
)


def get_full_worker_bid_info(bid: WorkerBidSchema) -> str:
    stage = ""

    if bid.state == ApprovalStatus.pending_approval:
        stage = "–û–∂–∏–¥–∞–µ—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è"
    elif bid.state == ApprovalStatus.approved:
        stage = "–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∞"
    else:
        stage = "–û—Ç–∫–∞–∑–∞–Ω–æ"

    bid_info = f"""{hbold("–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏")}: {bid.id}
{hbold("–§–∞–º–∏–ª–∏—è")}: {bid.l_name}
{hbold("–ò–º—è")}: {bid.f_name}
{hbold("–û—Ç—á–µ—Å—Ç–≤–æ")}: {bid.o_name}
{hbold("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è")}: {bid.birth_date.strftime(settings.date_format) if bid.birth_date is not None else "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}
{hbold("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")}: {bid.phone_number if bid.phone_number is not None else "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}
{hbold("–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ")}: {bid.department.name}
{hbold("–î–æ–∫—É–º–µ–Ω—Ç—ã")}: –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã –∫ —Å–æ–æ–±—â–µ–Ω–∏—é.
{hbold("–î–æ–ª–∂–Ω–æ—Å—Ç—å")}: {bid.post.name}
{hbold("–°—Ç–∞—Ç—É—Å")}: {stage}
{hbold("–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")}: {"–î–∞" if bid.official_work else "–ù–µ—Ç"}

{hbold("–î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∏—Ç–µ–ª—è")}
{hbold("–§–∞–º–∏–ª–∏—è")}: {bid.sender.l_name}
{hbold("–ò–º—è")}: {bid.sender.f_name}
{hbold("–û—Ç—á–µ—Å—Ç–≤–æ")}: {bid.sender.o_name}
{hbold("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")}: {bid.sender.phone_number if bid.sender.phone_number is not None else "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}
"""
    if bid.security_service_comment is not None and bid.security_service_comment != "":
        bid_info += f"\n\n{hbold('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –°–ë')}: {bid.security_service_comment}"
    if bid.accounting_service_comment is not None:
        bid_info += (
            f"\n\n{hbold('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∏–∏')}: {bid.accounting_service_comment}"
        )
    if bid.iiko_worker_id is not None:
        bid_info += f"\n\n{hbold('–¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä')}: {bid.iiko_worker_id}"
    documents_requests = get_worker_bid_documents_requests(bid.id)
    if documents_requests != []:
        bid_info += f"\n\n{hbold('–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤')}"
        for documents_request in documents_requests:
            bid_info += f"\n{documents_request.sender.l_name} "
            if documents_request.sender.f_name is not None:
                bid_info += f"{documents_request.sender.f_name[0]}. "
            if documents_request.sender.l_name is not None:
                bid_info += f"{documents_request.sender.l_name[0]}."
            bid_info += f": {documents_request.message}"

    return bid_info


def get_worker_bid_list_info(bid: WorkerBidSchema) -> str:
    return (
        f"{bid.id}: {bid.l_name} " + f"{bid.create_date.strftime(settings.date_format)}"
    )


async def notify_accounting(worker_id: int):
    worker = get_worker_by_id(worker_id)
    notify_workers_by_scope(
        FujiScope.bot_worker_bid_accounting_coordinate,
        message=f"{worker.l_name} {worker.f_name} {worker.o_name} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à—ë–ª —Å—Ç–∞–∂–∏—Ä–æ–≤–∫—É",
    )


def get_worker_pending_bids_btns(
    state_column: Any,
    buttons: list[InlineKeyboardButton],
    name: str,
    page_callback_data: WorkerBidPagesCallbackData,
):
    from app.services import get_pending_approval_bids
    from app.infra.database.models import WorkerBid

    bids = (
        get_pending_approval_bids(
            state_column=state_column, offset=page_callback_data.page
        )
        or []
    )
    if state_column == WorkerBid.accounting_service_state:
        for bid in bids:
            match bid.view_state:
                case ViewStatus.viewed:
                    symbol = "üëÅ"
                case ViewStatus.pending:
                    symbol = "‚è∞"
                case ViewStatus.pending_approval:
                    symbol = "‚úâÔ∏è"
                case _:
                    symbol = ""

            buttons.append(
                InlineKeyboardButton(
                    text=f"{symbol} {bid.id} {bid.l_name} {bid.f_name[0]} {bid.o_name[0]} {bid.post.name}",
                    callback_data=WorkerBidCallbackData(
                        id=bid.id,
                        mode=BidViewMode.full_with_approve,
                        endpoint_name=f"get_pending_bid_{name}",
                    ).pack(),
                )
            )
    else:
        for bid in bids:
            buttons.append(
                InlineKeyboardButton(
                    text=f"{bid.id} {bid.l_name} {bid.f_name[0]} {bid.o_name[0]} {bid.post.name}",
                    callback_data=WorkerBidCallbackData(
                        id=bid.id,
                        mode=BidViewMode.full_with_approve,
                        endpoint_name=f"get_pending_bid_{name}",
                    ).pack(),
                )
            )
    if len(bids) == 20:
        buttons.append(
            InlineKeyboardButton(
                text="–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞",
                callback_data=WorkerBidPagesCallbackData(
                    page=page_callback_data.page + 1,
                    state_name=page_callback_data.state_name,
                ).pack(),
            )
        )
    if page_callback_data.page > 0:
        buttons.append(
            InlineKeyboardButton(
                text="–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞",
                callback_data=WorkerBidPagesCallbackData(
                    page=page_callback_data.page - 1,
                    state_name=page_callback_data.state_name,
                ).pack(),
            )
        )
