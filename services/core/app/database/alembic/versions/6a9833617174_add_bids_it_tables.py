"""add_bids_it_tables

Revision ID: 6a9833617174
Revises: bec1c8870168
Create Date: 2024-08-23 11:36:41.352446

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects.postgresql import ENUM
import fastapi_storages

from app.infra.config import settings
import app.database.alembic.enum as c_enum

old_options = (
    "admin",
    "crm_bid",
    "crm_budget",
    "crm_expenditure",
    "bot_bid_create",
    "bot_bid_kru",
    "bot_bid_owner",
    "bot_bid_teller_cash",
    "bot_bid_teller_card",
    "bot_bid_accountant_cash",
    "bot_bid_accountant_card",
    "bot_rate",
    "bot_worker_bid",
    "bot_technical_request_worker",
    "bot_technical_request_repairman",
    "bot_technical_request_chief_technician",
    "bot_technical_request_territorial_manager",
    "bot_technical_request_department_director",
    "crm_fac_bid",
    "crm_cc_bid",
    "crm_cc_supervisor_bid",
)
new_options = sorted(
    old_options
    + (
        "bot_bid_it_worker",
        "bot_bid_it_repairman",
        "bot_bid_it_tm",
    )
)

table_columns = {"post_scopes": ["scope"]}

# revision identifiers, used by Alembic.
revision: str = "6a9833617174"
down_revision: Union[str, None] = "bec1c8870168"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    c_enum.update_enum(old_options, new_options, "fujiscope", table_columns)

    op.create_table(
        "problems_it",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("category", sa.String(), nullable=False),
        sa.Column("sla", sa.Float(), nullable=False),
        sa.Column("repairman_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["repairman_id"],
            ["workers.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "bids_it",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("problem_comment", sa.String(), nullable=False),
        sa.Column("work_comment", sa.String(), nullable=True),
        sa.Column("reopen_work_comment", sa.String(), nullable=True),
        sa.Column("problem_id", sa.Integer(), nullable=False),
        sa.Column("worker_id", sa.Integer(), nullable=False),
        sa.Column("repairman_id", sa.Integer(), nullable=True),
        sa.Column("territorial_manager_id", sa.Integer(), nullable=True),
        sa.Column("department_id", sa.Integer(), nullable=False),
        sa.Column(
            "status",
            ENUM(
                "pending",
                "approved",
                "denied",
                "pending_approval",
                "skipped",
                "not_relevant",
                name="approvalstatus",
                create_type=False,
            ),
            nullable=False,
        ),
        sa.Column("mark", sa.Integer(), nullable=True),
        sa.Column("opening_date", sa.DateTime(), nullable=False),
        sa.Column("done_date", sa.DateTime(), nullable=True),
        sa.Column("reopening_date", sa.DateTime(), nullable=True),
        sa.Column("approve_date", sa.DateTime(), nullable=True),
        sa.Column("close_date", sa.DateTime(), nullable=True),
        sa.Column("reopen_done_date", sa.DateTime(), nullable=True),
        sa.Column("reopen_approve_date", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["department_id"],
            ["departments.id"],
        ),
        sa.ForeignKeyConstraint(
            ["problem_id"],
            ["problems_it.id"],
        ),
        sa.ForeignKeyConstraint(
            ["repairman_id"],
            ["workers.id"],
        ),
        sa.ForeignKeyConstraint(
            ["territorial_manager_id"],
            ["workers.id"],
        ),
        sa.ForeignKeyConstraint(
            ["worker_id"],
            ["workers.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "bids_it_documents_repairman",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "document",
            fastapi_storages.integrations.sqlalchemy.FileType(storage=settings.storage),
            nullable=False,
        ),
        sa.Column("bid_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["bid_id"],
            ["bids_it.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "bids_it_documents_worker",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "document",
            fastapi_storages.integrations.sqlalchemy.FileType(storage=settings.storage),
            nullable=False,
        ),
        sa.Column("bid_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["bid_id"],
            ["bids_it.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.add_column(
        "departments", sa.Column("it_repairman_id", sa.Integer(), nullable=True)
    )
    op.create_foreign_key(None, "departments", "workers", ["it_repairman_id"], ["id"])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    c_enum.update_enum(new_options, old_options, "fujiscope", table_columns)

    op.drop_column("departments", "it_repairman_id")
    op.drop_table("bids_it_documents_worker")
    op.drop_table("bids_it_documents_repairman")
    op.drop_table("bids_it")
    op.drop_table("problems_it")
    # ### end Alembic commands ###
